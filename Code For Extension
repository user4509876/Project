import random

class collisions_class:
    def __init__(x, species):
        x.species = species

def collision(p1, p2):
    if p1.species != p2.species:  
        species_mapping = {'AB': ['C', 'D'],
                           'BC': ['A', 'D'],
                           'CD': ['A', 'B'],
                           'AD': ['B', 'C'],
                           'AC': ['B', 'D'],
                           'BD': ['A', 'C']}  

        x = ''.join(sorted([p1.species, p2.species]))
        new = random.choice(species_mapping[x])

        p1.species = new
        p2.species = new

def simulate(x, y):
    finalArray = []

    for n in range(1, y + 1):
        particles = [collisions_class('A') for _ in range(x[0])] + \
                    [collisions_class('B') for _ in range(x[1])] + \
                    [collisions_class('C') for _ in range(x[2])] + \
                    [collisions_class('D') for _ in range(x[3])]

        for _ in range(50000):
            p1, p2 = random.sample(particles, 2)
            if p1.species != p2.species:  
                collision(p1, p2)

        final = {species: sum(1 for p in particles if p.species == species) for species in ['A', 'B', 'C', 'D']}
        finalArray.append(final)

    return finalArray

def unique1(finalArray):
    count = {}
    for n in finalArray:
        dist = str(n)
        if dist not in count:
            count[dist] = 1
        else:
            count[dist] += 1
    
    unique2 = {}
    for dist, count in count.items():
        if count not in unique2:
            unique2[count] = [dist]
        else:
            unique2[count].append(dist)
    
    return unique2

#change for x values
for n in range(2, 12):
    #num of simulations
    x = 1000
    num_particles = [n, n, 0, 0]
    final = simulate(num_particles, x)
    unique3 = unique1(final)

    print(f"\nCounts of Unique Outputs for A=B={n}:")
    for count, dist in unique3.items():
        print(f"Count {count}:")
        for dist1 in dist:
            print(dist1)
